@{
    ViewData["Title"] = "Sessions";
}

<div class="text-center">
    <h1 class="display-4">Сесії, Middleware, Автентифікація</h1>
</div>

<p>
    <b>Сесії</b> - часові проміжки, протягом яких існують певні сутності.
    HttpSession - сесії, протягом яких зберігаються програмні змінні (дані).
    Під час сесії можуть надходити багато різних запитів, для всіх цих запитів 
    будуть доступні раніше збережені дані. 
</p>
<p>
    Призначення сесій - розпізнавання запитів, як таких, що належать до спільного джерела
    (один і той самий браузер), та "запам'ятовування" раніше введених даних.
    Сесії базуються на параметрах Cookie - заголовки HTTP протоколу, які 
    клієнт обов'язково після отримання буде пересилати у всіх наступних запитах
    до даного серверу (протягом часу існування Cookie). Для роботи сесій у Cookie
    вміщують ідентифікатор сесії, за яким ця сесія відновлюється з наступним запитом.
    Як правило, управління збереженням та відновленням даних сесії бере на себе фреймворк (ASP),
    для програмування сесію слід налаштувати та використовувати.
</p>
<p>
    <a href="https://learn.microsoft.com/en-us/aspnet/core/fundamentals/app-state?view=aspnetcore-7.0">Налаштування сесії</a>
    відбувається у декілька кроків.
</p>
<ul>
    <li>Включаємо управління розподілом пам'яті<br/>
        <code>builder.Services.AddDistributedMemoryCache();</code>
    </li>
    <li>Налагоджуємо Cookie<br/>
        <code>
            builder.Services.AddSession(options =><br />
            {<br />
            &emsp; options.IdleTimeout = TimeSpan.FromSeconds(60);<br />
            &emsp; options.Cookie.HttpOnly = true;<br />
            &emsp; options.Cookie.IsEssential = true;<br />
            });<br />
        </code>
    </li>
    <li>Додаємо Middleware сесії<br />
        <code>
            app.UseSession();
        </code>
    </li>
</ul>

<p>
    Після налагодження, доступ до сесії здійснюється через контекст запиту.
    У різних місцях (контроллер, представлення, тощо) зверення до контексту різне, але існує скрізь.
    У контроллері - це <code>HttpContext.Session</code>
</p>
<p>
    Дані у сесії: <i>@ViewData["StoredString"]</i>
    <form>
        <input name="userstring" value="Збережений рядок" />
        <button type="submit">Встановити</button>
    </form>
</p>
<p>
    Один з напрямів використання сесій - "скидання" даних форми. Якщо форма передана, то
    дані залишаються в адресному рядку (...?x=10) або у тілі запиту (для POST даних).
    У будь-якому разі оновлення сторінки призведе до повторної передачі даних.
    Вирішення проблеми - переадресація. Сервер на запит відповідає статусом Redirect, 
    це змушує браузер надіслати повторний запит, в якому вже не буде даних. 
    А для того щод дані не були асоційовані із цим запитом, вони зберігаються у сесії.
    (Див. також коментарі у методі SessionsForm)

    Як правило, для таких задач сесія короткотривала (~10 секунд)
</p>
<p>
    Дані від цієї форми: <i>@ViewData["Form2String"]</i>
    <form asp-action="SessionsForm">
        <input name="userstring" value="Збережений рядок 2" />
        <button type="submit">Встановити</button>
    </form>
</p>

<p>
    Другий напрям сесій - довготривале збереження даних, наприклад, даних автентифікації.
    Це дозволяє користувачу не вводити логін/пароль з кожним оновленням сторінки.
    Для перевірки автентифікації частіше за все використовується Middleware.
</p>
<p>
    <b>Middleware</b> - <a href="https://learn.microsoft.com/en-us/aspnet/core/fundamentals/middleware/?view=aspnetcore-7.0">ПЗ серединного рівня</a>
    Об'єкти, які складають шарувату структуру проходження (оброблення) запитів,
    кожен запит проводить усі шари Middleware один за одним як при обробленні (прямий хід),
    так і при поверненні (зворотній хід). Це дозволяє провести обробку УСІХ запитів - які
    надійшли будь-якими методами, на будь-яку адресу. Це спосіб виконати дію до запитів ПЕРЕД їх
    розподілом за контроллерами/методами.
</p>
<p>
    Для створення та впровадження Middleware необхідно:
</p>
<ul>
    <li> Класи Middleware прийнято зберігати в окремій папці проєкту </li>
    <li> Створюємо клас Middleware для автентифікації через сесії (SessionAuthMiddleware) </li>
    <li> Створюємо клас-розширення (див. коментарі у файлі класи) </li>
    <li> У Program.cs підключаємо наш Middleware </li>
</ul>
<p>
    <b>Автентифікація</b> - перевірка логіну/паролю (пошук у БД користувача),
    <b>Авторизація</b> - перевірка чи має право користувач переглядати даний ресурс (сторінку)
    З використанням Middleware та сесії:
</p>
<ul>
    <li> Користувач натискає Sign In, вводить логін та пароль </li>
    <li> Сервер перевіряє (автентифікує) та, у разі позитивного рішення,
         вносить у сесію відомості про користувача (id)
    </li>
    <li> Middleware запитує у сесії наявність даних щодо id користувача,
         якщо такий є, то заповнює права користувача, інакше нічого не робить
    </li>
    <li> У будь-якому місці проєкта можна дізнатись про наявність/відсутність 
         прав користувача
    </li>
</ul>